'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Atom, Lightbulb, Eye, HelpCircle } from 'lucide-react';
import { 
  EinsteinClarificationResponse, 
  ClarificationResponse,
  isEinsteinClarification 
} from '../types/mentor';

interface ClarificationBlockProps {
  clarificationResponse: EinsteinClarificationResponse | ClarificationResponse;
  isLoading: boolean;
  onSubmit: (answers: Record<string, string>) => void;
}

export default function ClarificationBlock({ 
  clarificationResponse, 
  isLoading, 
  onSubmit 
}: ClarificationBlockProps) {
  const [answers, setAnswers] = useState<Record<string, string>>({});

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  useEffect(() => {
    console.log('üìã ClarificationBlock: –ø–æ–ª—É—á–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã:', clarificationResponse.questions);
    console.log('üìã IDs –≤–æ–ø—Ä–æ—Å–æ–≤:', clarificationResponse.questions.map(q => q.id));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã ID
    const ids = clarificationResponse.questions.map(q => q.id);
    const uniqueIds = [...new Set(ids)];
    if (ids.length !== uniqueIds.length) {
      console.error('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID –≤–æ–ø—Ä–æ—Å–æ–≤!', ids);
    }
  }, [clarificationResponse]);

  useEffect(() => {
    console.log('üìù –¢–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã:', answers);
  }, [answers]);

  const handleAnswerChange = (questionId: string, value: string) => {
    console.log(`üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ${questionId}:`, value);
    setAnswers(prev => {
      const newAnswers = {
        ...prev,
        [questionId]: value
      };
      console.log('üìù –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ answers:', newAnswers);
      return newAnswers;
    });
  };

  const handleSubmit = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const requiredQuestions = clarificationResponse.questions.filter(q => q.required);
    const missingAnswers = requiredQuestions.filter(q => !answers[q.id]?.trim());
    
    if (missingAnswers.length > 0) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã');
      return;
    }

    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã:', answers);
    onSubmit(answers);
  };

  const isEinstein = isEinsteinClarification(clarificationResponse);

  return (
    <div className="max-w-3xl mx-auto space-y-6">
      {/* –≠–ô–ù–®–¢–ï–ô–ù: –ë–æ–≥–∞—Ç—ã–π header —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏ */}
      {isEinstein && (
        <div className="grid gap-4 mb-8">
          {/* –ü–µ—Ä–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ */}
          <Card className="border-blue-200 bg-blue-50">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2 text-lg text-blue-800">
                <Eye className="h-5 w-5" />
                –ü–µ—Ä–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-blue-700 italic leading-relaxed">
                {clarificationResponse.initial_observation}
              </p>
            </CardContent>
          </Card>

          {/* –°–∫—Ä—ã—Ç–æ–µ –¥–æ–ø—É—â–µ–Ω–∏–µ */}
          <Card className="border-amber-200 bg-amber-50">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2 text-lg text-amber-800">
                <Lightbulb className="h-5 w-5" />
                –°–∫—Ä—ã—Ç–æ–µ –¥–æ–ø—É—â–µ–Ω–∏–µ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-amber-700 font-medium leading-relaxed">
                {clarificationResponse.hidden_assumption}
              </p>
            </CardContent>
          </Card>

          {/* –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–æ–≥–∏—è */}
          <Card className="border-purple-200 bg-purple-50">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2 text-lg text-purple-800">
                <Atom className="h-5 w-5" />
                –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–æ–≥–∏—è
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-purple-700 leading-relaxed">
                {clarificationResponse.physics_parallel}
              </p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <HelpCircle className="h-6 w-6 text-indigo-600" />
            {isEinstein 
              ? '–ú—ã—Å–ª–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è'
              : '–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'
            }
          </CardTitle>
          <p className="text-slate-600">
            {isEinstein 
              ? '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Ñ–∏–∑–∏–∫–∏ –∏ –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.'
              : '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏.'
            }
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          {clarificationResponse.questions.map((question, index) => {
            const purposeConfig = {
              'smena_tochki_zreniya': {
                label: '–°–º–µ–Ω–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã',
                color: 'bg-green-100 text-green-700 border-green-200'
              },
              'vyyavlenie_dopusheniy': {
                label: '–í—ã—è–≤–ª–µ–Ω–∏–µ –¥–æ–ø—É—â–µ–Ω–∏–π',
                color: 'bg-orange-100 text-orange-700 border-orange-200'
              },
              'myslennyi_eksperiment': {
                label: '–ú—ã—Å–ª–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç',
                color: 'bg-purple-100 text-purple-700 border-purple-200'
              }
            }

            const config = purposeConfig[question.purpose]
            
            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
            const inputKey = `input-${question.id}-${index}`
            
            console.log(`üîç –†–µ–Ω–¥–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ ${question.id}, –∑–Ω–∞—á–µ–Ω–∏–µ:`, answers[question.id])

            return (
              <div key={`question-${question.id}-${index}`} className="space-y-3">
                <div className="flex items-start gap-3">
                  <div className="flex-shrink-0 w-8 h-8 bg-indigo-100 rounded-full flex items-center justify-center text-indigo-600 font-semibold mt-1">
                    {index + 1}
                  </div>
                  <div className="flex-1 space-y-3">
                    <div className="flex items-start gap-3">
                      <h3 className="font-medium text-slate-900 leading-relaxed flex-1">
                        {question.question}
                      </h3>
                      <div className="flex items-center gap-2 flex-shrink-0">
                        <Badge 
                          variant="secondary" 
                          className={`text-xs px-2 py-1 ${config.color}`}
                        >
                          {config.label}
                        </Badge>
                        {question.required && (
                          <Badge variant="destructive" className="text-xs px-2 py-1">
                            –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
                          </Badge>
                        )}
                      </div>
                    </div>
                    
                    {question.purpose === 'myslennyi_eksperiment' ? (
                      <Textarea
                        key={inputKey}
                        placeholder={isEinstein 
                          ? "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –º—ã—Å–ª–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è..."
                          : "–í–∞—à –æ—Ç–≤–µ—Ç..."
                        }
                        value={answers[question.id] || ''}
                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                        className="min-h-[100px] resize-none"
                        rows={3}
                      />
                    ) : (
                      <Input
                        key={inputKey}
                        placeholder={isEinstein 
                          ? "–í–∞—à–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ..."
                          : "–í–∞—à –æ—Ç–≤–µ—Ç..."
                        }
                        value={answers[question.id] || ''}
                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                        className="w-full"
                      />
                    )}
                  </div>
                </div>
              </div>
            )
          })}

          <div className="pt-4 border-t">
            <Button
              onClick={handleSubmit}
              disabled={isLoading}
              className="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-3"
              size="lg"
            >
              {isLoading ? (
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  {isEinstein ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Ñ–∏–∑–∏–∫–∏...' : '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç—ã...'}
                </div>
              ) : (
                isEinstein 
                  ? '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –≠–π–Ω—à—Ç–µ–π–Ω–∞' 
                  : '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ'
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
} 